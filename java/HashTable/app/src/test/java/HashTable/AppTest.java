/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTable;

import org.junit.jupiter.api.Test;
import treeIntersection.BinaryTree;
import treeIntersection.Tree;
import treeIntersection.TreeNode;


import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void HashTableTest() {
        HashTable hashtest= new HashTable();
        hashtest.add("adham", 300);
        assertEquals(7, hashtest.hash("adham"));
        assertEquals(300, hashtest.get("adham"));
        assertEquals(false , hashtest.contains("omar"));
        assertEquals(true , hashtest.contains("adham"));


    }
    @Test void repeatedWordTest() {
        HashTable testrepeatWord= new HashTable();

        assertEquals( "was", HashTable.repeatedWord("Once was upon a time,was there was a brave princess who"));
    }
    @Test void treeintersection(){
        BinaryTree<Integer> firstBinaryTree = new BinaryTree<>(new TreeNode<>(5));
        TreeNode<Integer> node1 = new TreeNode<>(4);
        TreeNode<Integer> node2 = new TreeNode<>(2);
        TreeNode<Integer> node3 = new TreeNode<>(6, node1, null);
        TreeNode<Integer> node5 = new TreeNode<>(4);
        firstBinaryTree.root.right = node5;
        firstBinaryTree.root.left = node3;

        BinaryTree<Integer> secondBinaryTree = new BinaryTree<>(new TreeNode<>(45));
        TreeNode<Integer> node6 = new TreeNode<>(4);
        TreeNode<Integer> node7 = new TreeNode<>(2);
        TreeNode<Integer> node8 = new TreeNode<>(1, node6, null);
        TreeNode<Integer> node9 = new TreeNode<>(9);
        secondBinaryTree.root.right = node9;
        secondBinaryTree.root.left = node8;
        assertEquals("[4]", Tree.treeIntersection(firstBinaryTree, secondBinaryTree).toString());

    }
    @Test
    public void testLeftJoin() {
        HashMap<String, String> h1 = new HashMap<>();
        h1.put("fond", "enamored");
        h1.put("wrath", "anger");
        h1.put("diligent", "employed");
        h1.put("outfit", "garb");


        HashMap<String, String> h2 = new HashMap<>();
        h2.put("fond", "averse");
        h2.put("wrath", "delight");
        h2.put("diligent", "idle");
        h2.put("guide", "follow");


        String[] a = {"enamored", "averse"};
        String[] a1 = {"anger", "delight"};
        String[] a2 = {"employed", "idle"};
        String[] a3 = {"garb", null};
        String[] a4 = {"usher", "follow"};

        HashMap<String, String[]> h3 = new HashMap<>();

        h3 = LeftJoin.leftJoin(h1, h2);
        assertEquals(5, h3.size());
        assertFalse(h3.containsKey("flow"));
        assertArrayEquals(a, h3.get("fond"));
        assertArrayEquals(a1, h3.get("wrath"));
        assertArrayEquals(a2, h3.get("diligent"));
        assertArrayEquals(a3, h3.get("outfit"));
        assertArrayEquals(a4, h3.get("guide"));
    }
}
